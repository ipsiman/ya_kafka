x-kafka-base: &kafka-base
  image: bitnami/kafka:3.5.0
  environment: &kafka-base-env
    KAFKA_ENABLE_KRAFT: yes
    ALLOW_PLAINTEXT_LISTENER: yes
    KAFKA_CFG_ALLOW_PLAINTEXT_LISTENER: yes
    KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
    KAFKA_CFG_PROCESS_ROLES: broker,controller
    KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
    KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
    KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
    KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
  healthcheck:
    test: ["CMD", "kafka-metadata-quorum.sh", "--bootstrap-server", "localhost:9092", "describe", "--status"]
    interval: 10s
    timeout: 10s
    retries: 10

services:
  kafka-0:
    <<: *kafka-base
    ports:
      - "9094:9094"
    environment:
      <<: *kafka-base-env
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094

  kafka-1:
    <<: *kafka-base
    ports:
      - "9095:9094"
    environment:
      <<: *kafka-base-env
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095

  kafka-2:
    <<: *kafka-base
    ports:
      - "9096:9094"
    environment:
      <<: *kafka-base-env
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096

  ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9092,kafka-2:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy

  create-topics:
    image: python:3.9-slim
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    working_dir: /scripts
    command: >
      sh -c "
      pip install confluent-kafka &&
      python create_topics.py
      "

  faust-app:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    container_name: faust-app
    depends_on:
      create-topics:
        condition: service_completed_successfully
    command: ["faust", "-A", "app.main", "worker", "-l", "info"]
